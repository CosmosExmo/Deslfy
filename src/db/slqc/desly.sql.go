// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: desly.sql

package db

import (
	"context"
)

const createDesly = `-- name: CreateDesly :one
INSERT INTO deslies (redirect, desly)
VALUES ($1, $2)
RETURNING id, redirect, desly, clicked, created_at
`

type CreateDeslyParams struct {
	Redirect string `json:"redirect"`
	Desly    string `json:"desly"`
}

func (q *Queries) CreateDesly(ctx context.Context, arg CreateDeslyParams) (Desly, error) {
	row := q.db.QueryRowContext(ctx, createDesly, arg.Redirect, arg.Desly)
	var i Desly
	err := row.Scan(
		&i.ID,
		&i.Redirect,
		&i.Desly,
		&i.Clicked,
		&i.CreatedAt,
	)
	return i, err
}

const getDesly = `-- name: GetDesly :one
SELECT id, redirect, desly, clicked, created_at
FROM deslies
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetDesly(ctx context.Context, id int32) (Desly, error) {
	row := q.db.QueryRowContext(ctx, getDesly, id)
	var i Desly
	err := row.Scan(
		&i.ID,
		&i.Redirect,
		&i.Desly,
		&i.Clicked,
		&i.CreatedAt,
	)
	return i, err
}

const getRedirectByDesly = `-- name: GetRedirectByDesly :one
SELECT id, redirect, desly, clicked, created_at
FROM deslies
WHERE desly = $1
LIMIT 1
`

func (q *Queries) GetRedirectByDesly(ctx context.Context, desly string) (Desly, error) {
	row := q.db.QueryRowContext(ctx, getRedirectByDesly, desly)
	var i Desly
	err := row.Scan(
		&i.ID,
		&i.Redirect,
		&i.Desly,
		&i.Clicked,
		&i.CreatedAt,
	)
	return i, err
}
