// Code generated by MockGen. DO NOT EDIT.
// Source: desly/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	db "desly/db/sqlc"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateDesly mocks base method.
func (m *MockStore) CreateDesly(arg0 context.Context, arg1 db.CreateDeslyParams) (db.Desly, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDesly", arg0, arg1)
	ret0, _ := ret[0].(db.Desly)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDesly indicates an expected call of CreateDesly.
func (mr *MockStoreMockRecorder) CreateDesly(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDesly", reflect.TypeOf((*MockStore)(nil).CreateDesly), arg0, arg1)
}

// CreateDeslyTx mocks base method.
func (m *MockStore) CreateDeslyTx(arg0 context.Context, arg1 db.CreateDeslyTxParams) (db.Desly, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeslyTx", arg0, arg1)
	ret0, _ := ret[0].(db.Desly)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDeslyTx indicates an expected call of CreateDeslyTx.
func (mr *MockStoreMockRecorder) CreateDeslyTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeslyTx", reflect.TypeOf((*MockStore)(nil).CreateDeslyTx), arg0, arg1)
}

// CreateSession mocks base method.
func (m *MockStore) CreateSession(arg0 context.Context, arg1 db.CreateSessionParams) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockStoreMockRecorder) CreateSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockStore)(nil).CreateSession), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// CreateUserToken mocks base method.
func (m *MockStore) CreateUserToken(arg0 context.Context, arg1 db.CreateUserTokenParams) (db.UserToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserToken", arg0, arg1)
	ret0, _ := ret[0].(db.UserToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserToken indicates an expected call of CreateUserToken.
func (mr *MockStoreMockRecorder) CreateUserToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserToken", reflect.TypeOf((*MockStore)(nil).CreateUserToken), arg0, arg1)
}

// DeleteUserToken mocks base method.
func (m *MockStore) DeleteUserToken(arg0 context.Context, arg1 db.DeleteUserTokenParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserToken", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserToken indicates an expected call of DeleteUserToken.
func (mr *MockStoreMockRecorder) DeleteUserToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserToken", reflect.TypeOf((*MockStore)(nil).DeleteUserToken), arg0, arg1)
}

// GetDesly mocks base method.
func (m *MockStore) GetDesly(arg0 context.Context, arg1 db.GetDeslyParams) (db.Desly, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDesly", arg0, arg1)
	ret0, _ := ret[0].(db.Desly)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDesly indicates an expected call of GetDesly.
func (mr *MockStoreMockRecorder) GetDesly(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDesly", reflect.TypeOf((*MockStore)(nil).GetDesly), arg0, arg1)
}

// GetRedirectByDesly mocks base method.
func (m *MockStore) GetRedirectByDesly(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRedirectByDesly", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRedirectByDesly indicates an expected call of GetRedirectByDesly.
func (mr *MockStoreMockRecorder) GetRedirectByDesly(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRedirectByDesly", reflect.TypeOf((*MockStore)(nil).GetRedirectByDesly), arg0, arg1)
}

// GetSession mocks base method.
func (m *MockStore) GetSession(arg0 context.Context, arg1 uuid.UUID) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockStoreMockRecorder) GetSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockStore)(nil).GetSession), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// GetUserToken mocks base method.
func (m *MockStore) GetUserToken(arg0 context.Context, arg1 db.GetUserTokenParams) (db.UserToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserToken", arg0, arg1)
	ret0, _ := ret[0].(db.UserToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserToken indicates an expected call of GetUserToken.
func (mr *MockStoreMockRecorder) GetUserToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserToken", reflect.TypeOf((*MockStore)(nil).GetUserToken), arg0, arg1)
}

// GetUserTokens mocks base method.
func (m *MockStore) GetUserTokens(arg0 context.Context, arg1 string) ([]db.UserToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserTokens", arg0, arg1)
	ret0, _ := ret[0].([]db.UserToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserTokens indicates an expected call of GetUserTokens.
func (mr *MockStoreMockRecorder) GetUserTokens(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserTokens", reflect.TypeOf((*MockStore)(nil).GetUserTokens), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(arg0 context.Context, arg1 db.UpdateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), arg0, arg1)
}
