// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: user_tokens.sql

package db

import (
	"context"
	"time"
)

const createUserToken = `-- name: CreateUserToken :one
INSERT INTO user_tokens (owner, token, expire_at)
VALUES ($1, $2, $3)
RETURNING id, owner, token, expire_at, created_at
`

type CreateUserTokenParams struct {
	Owner    string    `json:"owner"`
	Token    string    `json:"token"`
	ExpireAt time.Time `json:"expire_at"`
}

func (q *Queries) CreateUserToken(ctx context.Context, arg CreateUserTokenParams) (UserToken, error) {
	row := q.db.QueryRowContext(ctx, createUserToken, arg.Owner, arg.Token, arg.ExpireAt)
	var i UserToken
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Token,
		&i.ExpireAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUserToken = `-- name: DeleteUserToken :exec
DELETE FROM user_tokens
WHERE id = $1 AND owner = $2
`

type DeleteUserTokenParams struct {
	ID    int32  `json:"id"`
	Owner string `json:"owner"`
}

func (q *Queries) DeleteUserToken(ctx context.Context, arg DeleteUserTokenParams) error {
	_, err := q.db.ExecContext(ctx, deleteUserToken, arg.ID, arg.Owner)
	return err
}

const getUserToken = `-- name: GetUserToken :one
SELECT id, owner, token, expire_at, created_at
FROM user_tokens
WHERE owner = $1 AND id = $2
`

type GetUserTokenParams struct {
	Owner string `json:"owner"`
	ID    int32  `json:"id"`
}

func (q *Queries) GetUserToken(ctx context.Context, arg GetUserTokenParams) (UserToken, error) {
	row := q.db.QueryRowContext(ctx, getUserToken, arg.Owner, arg.ID)
	var i UserToken
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Token,
		&i.ExpireAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserTokens = `-- name: GetUserTokens :many
SELECT id, owner, token, expire_at, created_at
FROM user_tokens
WHERE owner = $1
`

func (q *Queries) GetUserTokens(ctx context.Context, owner string) ([]UserToken, error) {
	rows, err := q.db.QueryContext(ctx, getUserTokens, owner)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserToken{}
	for rows.Next() {
		var i UserToken
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Token,
			&i.ExpireAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
