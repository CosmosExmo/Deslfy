// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: service_deslfy.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Deslfy_CreateUser_FullMethodName      = "/pb.Deslfy/CreateUser"
	Deslfy_UpdateUser_FullMethodName      = "/pb.Deslfy/UpdateUser"
	Deslfy_LoginUser_FullMethodName       = "/pb.Deslfy/LoginUser"
	Deslfy_VerifyEmail_FullMethodName     = "/pb.Deslfy/VerifyEmail"
	Deslfy_RenewAccess_FullMethodName     = "/pb.Deslfy/RenewAccess"
	Deslfy_CreateUserToken_FullMethodName = "/pb.Deslfy/CreateUserToken"
	Deslfy_GetUserToken_FullMethodName    = "/pb.Deslfy/GetUserToken"
	Deslfy_GetUserTokens_FullMethodName   = "/pb.Deslfy/GetUserTokens"
	Deslfy_DeleteUserToken_FullMethodName = "/pb.Deslfy/DeleteUserToken"
	Deslfy_CreateDesly_FullMethodName     = "/pb.Deslfy/CreateDesly"
	Deslfy_GetDesly_FullMethodName        = "/pb.Deslfy/GetDesly"
)

// DeslfyClient is the client API for Deslfy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeslfyClient interface {
	// Users
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error)
	VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*VerifyEmailResponse, error)
	// Token
	RenewAccess(ctx context.Context, in *RenewAccessRequest, opts ...grpc.CallOption) (*RenewAccessResponse, error)
	// User Tokens
	CreateUserToken(ctx context.Context, in *CreateUserTokenRequest, opts ...grpc.CallOption) (*CreateUserTokenResponse, error)
	GetUserToken(ctx context.Context, in *GetUserTokenRequest, opts ...grpc.CallOption) (*GetUserTokenResponse, error)
	GetUserTokens(ctx context.Context, in *GetUserTokensRequest, opts ...grpc.CallOption) (*GetUserTokensResponse, error)
	DeleteUserToken(ctx context.Context, in *DeleteUserTokenRequest, opts ...grpc.CallOption) (*DeleteUserTokenResponse, error)
	// Deslfy
	CreateDesly(ctx context.Context, in *CreateDeslyRequest, opts ...grpc.CallOption) (*CreateDeslyResponse, error)
	GetDesly(ctx context.Context, in *GetDeslyRequest, opts ...grpc.CallOption) (*GetDeslyResponse, error)
}

type deslfyClient struct {
	cc grpc.ClientConnInterface
}

func NewDeslfyClient(cc grpc.ClientConnInterface) DeslfyClient {
	return &deslfyClient{cc}
}

func (c *deslfyClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, Deslfy_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deslfyClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, Deslfy_UpdateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deslfyClient) LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error) {
	out := new(LoginUserResponse)
	err := c.cc.Invoke(ctx, Deslfy_LoginUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deslfyClient) VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*VerifyEmailResponse, error) {
	out := new(VerifyEmailResponse)
	err := c.cc.Invoke(ctx, Deslfy_VerifyEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deslfyClient) RenewAccess(ctx context.Context, in *RenewAccessRequest, opts ...grpc.CallOption) (*RenewAccessResponse, error) {
	out := new(RenewAccessResponse)
	err := c.cc.Invoke(ctx, Deslfy_RenewAccess_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deslfyClient) CreateUserToken(ctx context.Context, in *CreateUserTokenRequest, opts ...grpc.CallOption) (*CreateUserTokenResponse, error) {
	out := new(CreateUserTokenResponse)
	err := c.cc.Invoke(ctx, Deslfy_CreateUserToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deslfyClient) GetUserToken(ctx context.Context, in *GetUserTokenRequest, opts ...grpc.CallOption) (*GetUserTokenResponse, error) {
	out := new(GetUserTokenResponse)
	err := c.cc.Invoke(ctx, Deslfy_GetUserToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deslfyClient) GetUserTokens(ctx context.Context, in *GetUserTokensRequest, opts ...grpc.CallOption) (*GetUserTokensResponse, error) {
	out := new(GetUserTokensResponse)
	err := c.cc.Invoke(ctx, Deslfy_GetUserTokens_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deslfyClient) DeleteUserToken(ctx context.Context, in *DeleteUserTokenRequest, opts ...grpc.CallOption) (*DeleteUserTokenResponse, error) {
	out := new(DeleteUserTokenResponse)
	err := c.cc.Invoke(ctx, Deslfy_DeleteUserToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deslfyClient) CreateDesly(ctx context.Context, in *CreateDeslyRequest, opts ...grpc.CallOption) (*CreateDeslyResponse, error) {
	out := new(CreateDeslyResponse)
	err := c.cc.Invoke(ctx, Deslfy_CreateDesly_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deslfyClient) GetDesly(ctx context.Context, in *GetDeslyRequest, opts ...grpc.CallOption) (*GetDeslyResponse, error) {
	out := new(GetDeslyResponse)
	err := c.cc.Invoke(ctx, Deslfy_GetDesly_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeslfyServer is the server API for Deslfy service.
// All implementations must embed UnimplementedDeslfyServer
// for forward compatibility
type DeslfyServer interface {
	// Users
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error)
	VerifyEmail(context.Context, *VerifyEmailRequest) (*VerifyEmailResponse, error)
	// Token
	RenewAccess(context.Context, *RenewAccessRequest) (*RenewAccessResponse, error)
	// User Tokens
	CreateUserToken(context.Context, *CreateUserTokenRequest) (*CreateUserTokenResponse, error)
	GetUserToken(context.Context, *GetUserTokenRequest) (*GetUserTokenResponse, error)
	GetUserTokens(context.Context, *GetUserTokensRequest) (*GetUserTokensResponse, error)
	DeleteUserToken(context.Context, *DeleteUserTokenRequest) (*DeleteUserTokenResponse, error)
	// Deslfy
	CreateDesly(context.Context, *CreateDeslyRequest) (*CreateDeslyResponse, error)
	GetDesly(context.Context, *GetDeslyRequest) (*GetDeslyResponse, error)
	mustEmbedUnimplementedDeslfyServer()
}

// UnimplementedDeslfyServer must be embedded to have forward compatible implementations.
type UnimplementedDeslfyServer struct {
}

func (UnimplementedDeslfyServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedDeslfyServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedDeslfyServer) LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedDeslfyServer) VerifyEmail(context.Context, *VerifyEmailRequest) (*VerifyEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyEmail not implemented")
}
func (UnimplementedDeslfyServer) RenewAccess(context.Context, *RenewAccessRequest) (*RenewAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenewAccess not implemented")
}
func (UnimplementedDeslfyServer) CreateUserToken(context.Context, *CreateUserTokenRequest) (*CreateUserTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserToken not implemented")
}
func (UnimplementedDeslfyServer) GetUserToken(context.Context, *GetUserTokenRequest) (*GetUserTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserToken not implemented")
}
func (UnimplementedDeslfyServer) GetUserTokens(context.Context, *GetUserTokensRequest) (*GetUserTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserTokens not implemented")
}
func (UnimplementedDeslfyServer) DeleteUserToken(context.Context, *DeleteUserTokenRequest) (*DeleteUserTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserToken not implemented")
}
func (UnimplementedDeslfyServer) CreateDesly(context.Context, *CreateDeslyRequest) (*CreateDeslyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDesly not implemented")
}
func (UnimplementedDeslfyServer) GetDesly(context.Context, *GetDeslyRequest) (*GetDeslyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDesly not implemented")
}
func (UnimplementedDeslfyServer) mustEmbedUnimplementedDeslfyServer() {}

// UnsafeDeslfyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeslfyServer will
// result in compilation errors.
type UnsafeDeslfyServer interface {
	mustEmbedUnimplementedDeslfyServer()
}

func RegisterDeslfyServer(s grpc.ServiceRegistrar, srv DeslfyServer) {
	s.RegisterService(&Deslfy_ServiceDesc, srv)
}

func _Deslfy_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeslfyServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Deslfy_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeslfyServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deslfy_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeslfyServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Deslfy_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeslfyServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deslfy_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeslfyServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Deslfy_LoginUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeslfyServer).LoginUser(ctx, req.(*LoginUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deslfy_VerifyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeslfyServer).VerifyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Deslfy_VerifyEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeslfyServer).VerifyEmail(ctx, req.(*VerifyEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deslfy_RenewAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenewAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeslfyServer).RenewAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Deslfy_RenewAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeslfyServer).RenewAccess(ctx, req.(*RenewAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deslfy_CreateUserToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeslfyServer).CreateUserToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Deslfy_CreateUserToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeslfyServer).CreateUserToken(ctx, req.(*CreateUserTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deslfy_GetUserToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeslfyServer).GetUserToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Deslfy_GetUserToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeslfyServer).GetUserToken(ctx, req.(*GetUserTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deslfy_GetUserTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeslfyServer).GetUserTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Deslfy_GetUserTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeslfyServer).GetUserTokens(ctx, req.(*GetUserTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deslfy_DeleteUserToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeslfyServer).DeleteUserToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Deslfy_DeleteUserToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeslfyServer).DeleteUserToken(ctx, req.(*DeleteUserTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deslfy_CreateDesly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeslyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeslfyServer).CreateDesly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Deslfy_CreateDesly_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeslfyServer).CreateDesly(ctx, req.(*CreateDeslyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deslfy_GetDesly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeslyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeslfyServer).GetDesly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Deslfy_GetDesly_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeslfyServer).GetDesly(ctx, req.(*GetDeslyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Deslfy_ServiceDesc is the grpc.ServiceDesc for Deslfy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Deslfy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Deslfy",
	HandlerType: (*DeslfyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _Deslfy_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Deslfy_UpdateUser_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _Deslfy_LoginUser_Handler,
		},
		{
			MethodName: "VerifyEmail",
			Handler:    _Deslfy_VerifyEmail_Handler,
		},
		{
			MethodName: "RenewAccess",
			Handler:    _Deslfy_RenewAccess_Handler,
		},
		{
			MethodName: "CreateUserToken",
			Handler:    _Deslfy_CreateUserToken_Handler,
		},
		{
			MethodName: "GetUserToken",
			Handler:    _Deslfy_GetUserToken_Handler,
		},
		{
			MethodName: "GetUserTokens",
			Handler:    _Deslfy_GetUserTokens_Handler,
		},
		{
			MethodName: "DeleteUserToken",
			Handler:    _Deslfy_DeleteUserToken_Handler,
		},
		{
			MethodName: "CreateDesly",
			Handler:    _Deslfy_CreateDesly_Handler,
		},
		{
			MethodName: "GetDesly",
			Handler:    _Deslfy_GetDesly_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_deslfy.proto",
}
