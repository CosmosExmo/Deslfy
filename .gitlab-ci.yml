image: golang:1.20.5-alpine3.18

stages:
  - Test
  - Build

db_create_test:
  stage: Test
  services:
    - postgres:15.3-alpine3.18
  variables:
    POSTGRES_DB: deslfy
    POSTGRES_USER: root
    POSTGRES_PASSWORD: secret
    POSTGRES_PORT: 5432
    POSTGRES_HOST_AUTH_METHOD: trust
    TZ: Europe/Istanbul
  before_script:
    - apk add --update curl && rm -rf /var/cache/apk/*
    - apk add --no-cache make
  script:
    - echo "Database service started"
    - curl -L https://github.com/golang-migrate/migrate/releases/download/v4.16.1/migrate.linux-amd64.tar.gz | tar xvz
    - mv migrate /usr/bin/migrate
    - which migrate
    - make migrateup
    - make test
  tags:
    - deploy-runner
  when: manual

variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""

create_env_file:
  stage: Build
  before_script:
    - apk add --no-cache jq
  script:
    - |
      echo $APP_ENV | jq -Rs 'split(" ") | map(split("=") | {(.[0]): .[1]}) | add' > env.json
      cat env.json | jq -r 'to_entries[] | "\(.key)=\(.value)"' > app.env
  after_script:
    - mkdir env_files
    - mv app.env env_files
  artifacts:
    name: env_files_artifact
    paths:
      - env_files
  tags:
    - deploy-runner
  when: manual


build_image:
  stage: Build
  needs:
    - job: create_env_file
      artifacts: true
  image: 
    name: amazon/aws-cli:2.11.27
    entrypoint: [""]
  services:
    - docker:23.0.6-dind-alpine3.18
  before_script:
    - amazon-linux-extras install docker
    - aws --version
    - docker --version
  script:
    - cd src/;
    - mv env_files/app.env .
    - ls
    - docker build -t $AWS_DOCKER_REGISTRY_URI/deslfy:latest -t $AWS_DOCKER_REGISTRY_URI/deslfy:${CI_COMMIT_SHORT_SHA} .
    - aws ecr get-login-password | docker login -u AWS $AWS_DOCKER_REGISTRY_URI --password-stdin
    - docker push $AWS_DOCKER_REGISTRY_URI/deslfy:${CI_COMMIT_SHORT_SHA}
  tags:
    - deploy-runner
  when: manual
