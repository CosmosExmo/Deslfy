image: golang:1.20.5-alpine3.18

stages:
  - Test
  - Build

prepare_env_file:
  stage: Test
  before_script:
    - apk add --no-cache jq
  script:
    - |
      echo $TEST_ENV | jq -Rs 'split(" ") | map(split("=") | {(.[0]): (.[1:] | join("="))}) | add' > env.json
      cat env.json | jq -r 'to_entries[] | "\(.key)=\(.value)"' > app.env
  after_script:
    - mkdir env_files
    - mv app.env env_files
  artifacts:
    name: env_files_artifact
    paths:
      - env_files
  tags:
    - deploy-runner
  only:
    - merge_requests

make_test:
  stage: Test
  needs:
    - job: prepare_env_file
      artifacts: true
  services:
    - postgres:15.3-alpine3.18
  variables:
    POSTGRES_DB: deslfy
    POSTGRES_USER: root
    POSTGRES_PASSWORD: secret
    POSTGRES_PORT: 5432
    POSTGRES_HOST_AUTH_METHOD: trust
    TZ: Europe/Istanbul
  before_script:
    - apk add --update curl && rm -rf /var/cache/apk/*
    - apk add --no-cache make
  script:
    - mv env_files/app.env src/
    - echo "Database service started"
    - docker run --name redis -p 6379:6379 -d redis:6.0.20-alpine3.18
    - make test
  tags:
    - deploy-runner
  only:
    - merge_requests

variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""

prod_prepare_env_file:
  stage: Build
  before_script:
    - apk add --no-cache jq
  script:
    - |
      echo $APP_ENV | jq -Rs 'split(" ") | map(split("=") | {(.[0]): (.[1:] | join("="))}) | add' > env.json
      cat env.json | jq -r 'to_entries[] | "\(.key)=\(.value)"' > app.env
  after_script:
    - mkdir env_files
    - mv app.env env_files
  artifacts:
    name: env_files_artifact
    paths:
      - env_files
  tags:
    - deploy-runner
  when: manual

prod_build_image:
  stage: Build
  needs:
    - job: prod_prepare_env_file
      artifacts: true
  image: 
    name: amazon/aws-cli:2.11.27
    entrypoint: [""]
  services:
    - docker:23.0.6-dind-alpine3.18
  before_script:
    - amazon-linux-extras install docker
    - aws --version
    - docker --version
  script:
    - mv env_files/app.env src/
    - cd src/;
    - docker build -t $AWS_REGISTRY_URI:latest -t $AWS_REGISTRY_URI:${CI_COMMIT_SHORT_SHA} .
    - aws ecr get-login-password | docker login -u AWS $AWS_REGISTRY_URI --password-stdin
    - docker push -a $AWS_REGISTRY_URI
  tags:
    - deploy-runner
  when: manual

prod_deploy_image:
  stage: Build
  needs:
    - job: prod_build_image
  image:
    name: matshareyourscript/aws-helm-kubectl
  before_script:
    - export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
    - export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    - export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
    - |
      echo $APP_ENV | jq -Rs 'split(" ") | map(split("=") | {(.[0]): (.[1:] | join("="))}) | add' > env.json
      cat env.json | jq -r 'to_entries[] | "\(.key)=\(.value)"' > app.env
  script:
    - |
      aws eks update-kubeconfig --name Deslfy --region eu-central-1
      kubectl apply -f eks/aws-auth.yaml
      kubectl apply -f eks/deployment.yaml
      kubectl apply -f eks/service.yaml
      kubectl apply -f eks/postgresql-service.yaml
      kubectl apply -f eks/issuer.yaml
      kubectl apply -f eks/ingress.yaml
  tags:
    - deploy-runner
  when: manual